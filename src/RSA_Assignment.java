import java.math.BigInteger;
import java.util.Random;


public class RSA_Assignment {

	public static void main (String args[]){

		// setting 2 prime numbers
		BigInteger p = new BigInteger("531872289054204184185084734375133399408303613982130856645299464930952178606045848877129147820387996428175564228204785846141207532462936339834139412401975338705794646595487324365194792822189473092273993580587964571659678084484152603881094176995594813302284232006001752128168901293560051833646881436219");
		BigInteger q = new BigInteger("319705304701141539155720137200974664666792526059405792539680974929469783512821793995613718943171723765238853752439032835985158829038528214925658918372196742089464683960239919950882355844766055365179937610326127675178857306260955550407044463370239890187189750909036833976197804646589380690779463976173");

		// multiplying to find n for part of public key
		BigInteger n = p.multiply(q);


		// printing out for testing
		//         System.out.println(n);

		// finding p-1 and q-1
		BigInteger p1 = p.subtract(BigInteger.ONE);
		BigInteger q1 = q.subtract(BigInteger.ONE);

		// multiplying to find phi
		BigInteger phi = p1.multiply(q1);


		BigInteger e;

	}






}

